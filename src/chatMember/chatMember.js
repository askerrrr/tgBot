const { MongoClient, ServerApiVersion } = require("mongodb");
const env = require("../../env");
const e = require("cors");

const client = new MongoClient(env.mongourl, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

(async () => {
  try {
    await client.connect();
    await client.db("admin").command({ ping: 1 });
    console.log(
      "Pinged your deployment. You successfully connected to MongoDB!"
    );
  } catch (err) {
    console.log(err);
  }
})();

const collection = client.db("TelegramUsers").collection("users");

module.exports.chat = async (bot) => {
  bot.hears("/start", async (ctx) => {
    await ctx.reply(
      `${ctx.from.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç  ü§ñ\n–í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω id-${ctx.chat.id}, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–æ—Ç ID –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '–ú–µ–Ω—é' `
    );

    const chatMember = await ctx.chatMembers.getChatMember(
      ctx.chat.id,
      ctx.from.id
    );
    const existingDocument = await collection.findOne(chatMember.user);
    if (!existingDocument) {
      return await collection.insertOne(chatMember.user);
    } else {
      console.log("Document already exists in the collection");
    }
  });
};
