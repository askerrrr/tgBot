const { Bot, GrammyError, HttpError, Keyboard } = require("grammy");
require("dotenv").config();
const { getCNY, getDate } = require("./valute");
const commands = require("./commands");
const {
  botText,
  frequentlyAskedQuestions,
  textFor1688,
  unprocessedMessages,
} = require("./text");
const bot = new Bot(process.env.BOT_TOKEN);

bot.hears("/start", async (ctx) => {
  await ctx.reply(
    `${ctx.from.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç  ü§ñ\n–í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω ID-${ctx.chat.id}, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —ç—Ç–æ—Ç ID –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '–ú–µ–Ω—é' `
  );
});

bot.api.setMyCommands(commands);

const KeyboardForTheMainMenu = new Keyboard()
  .text("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!")
  .text("–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?")
  .row()
  .text("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞")
  .text("–î—Ä—É–≥–æ–µ")
  .row()
  .text("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã FAQ")
  .resized();

// –ë–ª–æ–∫ –û—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é =>

bot.hears("/menu", async (ctx) => {
  await ctx.reply("–ú–µ–Ω—é", {
    reply_markup: KeyboardForTheMainMenu,
  });
});

bot.hears("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!", async (ctx) => {
  await ctx.reply(
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∞–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Ä–∞–∑–º–µ—Ä(–µ—Å–ª–∏ —ç—Ç–æ –æ–¥–µ–∂–¥–∞ –∏–ª–∏ –æ–±—É–≤—å) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
  );
});
bot.hears("–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?", async (ctx) => {
  await ctx.reply(botText);
});
bot.hears("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞", async (ctx) => {
  try {
    const valute = await getCNY();

    await ctx.reply(
      `–ö—É—Ä—Å –Ω–∞ ${getDate()} ${valute.Valute.CNY.Value + 1.5} —Ä—É–±–ª–µ–π –∑–∞ 1 —é–∞–Ω—å`
    );
  } catch (err) {
    console.log(err);
  }
});
bot.hears("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã FAQ", async (ctx) => {
  await ctx.reply(frequentlyAskedQuestions, {
    parse_mode: "HTML",
  });
});

bot.hears("–î—Ä—É–≥–æ–µ", async (ctx) => {
  await ctx.reply("–î—Ä—É–≥–æ–µ", {
    reply_markup: keyboardForOtherQueries,
  });
});
//  <= –ë–ª–æ–∫ –û—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é

//  –ë–ª–æ–∫ —Ä–∞–∑–¥–µ—Ä–∞ "–î—Ä—É–≥–æ–µ" =>

const keyboardForOtherQueries = new Keyboard()
  .text("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
  .row()
  .text("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
  .resized();

bot.hears("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", async (ctx) => {
  await ctx.reply("–ú–µ–Ω—é", {
    reply_markup: KeyboardForTheMainMenu,
  });
});

//  <= –ë–ª–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ "–î—Ä—É–≥–æ–µ"

// –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–î—Ä—É–≥–æ–µ/–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" =>
const keyboardForDownloadingApp = new Keyboard()
  .text("1688")
  .text("Taobao")
  .row()
  .text("Poizon")
  .text("Pinduoduo")
  .row()
  .text("–ù–∞–∑–∞–¥")
  .resized();

bot.hears("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", {
    reply_markup: keyboardForDownloadingApp,
  });
});

bot.hears("–ù–∞–∑–∞–¥", async (ctx) => {
  await ctx.reply("–î—Ä—É–≥–æ–µ", {
    reply_markup: keyboardForOtherQueries,
  });
});
//  <= –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–î—Ä—É–≥–æ–µ/–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"

// –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ =>
const keyboardForDeviceSelection = new Keyboard()
  .text("–î–ª—è –∞–π—Ñ–æ–Ω–∞")
  .text("–î–ª—è –∞–Ω–¥—Ä–æ–∏–¥–∞")
  .row()
  .text("–ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º")
  .resized();

bot.hears("1688", async (ctx) => {
  await ctx.reply(textFor1688, {
    parse_mode: "HTML",
    disable_web_page_preview: true,
  });
});

bot.hears("–ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", {
    reply_markup: keyboardForDownloadingApp,
  });
});

bot.on("::url", async (ctx) => {
  await ctx.reply("–º–º–º–º... —Å—Å—ã–ª–æ—á–∫–∞...", {
    parse_mode: "HTML",
  });
});

bot.on("message", async (ctx) => {
  await ctx.reply(unprocessedMessages);
});

//–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.start();
